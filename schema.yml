openapi: 3.0.3
info:
  title: Your Project API
  version: 1.0.0
  description: Your project description asd
paths:
  /api/comment/{comment_id}:
    get:
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: comment_retrieve
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - comment
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
          description: ''
    put:
      operationId: comment_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentList'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
          description: ''
    patch:
      operationId: comment_partial_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentList'
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
          description: ''
    delete:
      operationId: comment_destroy
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - comment
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/post/{id}:
    get:
      operationId: post_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
          description: ''
    put:
      operationId: post_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
    patch:
      operationId: post_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostCreate'
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
    delete:
      operationId: post_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/post/{post_id}/bookmark/{list_id}:
    post:
      operationId: post_bookmark_create
      parameters:
      - in: path
        name: list_id
        schema:
          type: integer
        required: true
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/post/{post_id}/bookmark_details:
    get:
      operationId: post_bookmark_details_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentListList'
          description: ''
    post:
      operationId: post_bookmark_details_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: ''
  /api/post/{post_id}/comment:
    get:
      operationId: post_comment_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentListList'
          description: ''
    post:
      operationId: post_comment_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: ''
  /api/post/{post_id}/like:
    get:
      operationId: post_like_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLikeDetailList'
          description: ''
    post:
      operationId: post_like_create
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        required: true
      tags:
      - post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LikeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LikeCreate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeCreate'
          description: ''
  /api/posts:
    get:
      operationId: posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - posts
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostDetailList'
          description: ''
    post:
      operationId: posts_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
  /api/profile/{profile_id}/follow:
    post:
      operationId: profile_follow_create
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/profile/{profile_id}/followers:
    get:
      operationId: profile_followers_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFollowerListList'
          description: ''
  /api/profile/{profile_id}/following:
    get:
      operationId: profile_following_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFollowingListList'
          description: ''
  /api/profile/{profile_id}/list/{id}:
    get:
      operationId: profile_list_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDetail'
          description: ''
    put:
      operationId: profile_list_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/List'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/List'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: ''
    patch:
      operationId: profile_list_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedList'
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: ''
    delete:
      operationId: profile_list_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/profile/{profile_id}/lists:
    get:
      operationId: profile_lists_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListList'
          description: ''
    post:
      operationId: profile_lists_create
      parameters:
      - in: path
        name: profile_id
        schema:
          type: integer
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/List'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/List'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: ''
  /api/register:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        about:
          type: string
          readOnly: true
        follower_details:
          type: string
          readOnly: true
      required:
      - about
      - follower_details
      - id
      - username
    BookmarkItem:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/PostDetail'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - post
    CommentCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
        post:
          type: integer
        parent_comment:
          type: integer
          nullable: true
      required:
      - author
      - body
      - created_at
      - id
      - post
      - updated_at
    CommentList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          maxLength: 5000
        author:
          type: integer
        post:
          type: integer
        parent_comment:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sub_comments:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveComment'
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - post
      - sub_comments
      - updated_at
    FollowerList:
      type: object
      properties:
        follower:
          $ref: '#/components/schemas/Author'
      required:
      - follower
    FollowingList:
      type: object
      properties:
        followed:
          $ref: '#/components/schemas/Author'
      required:
      - followed
    LikeCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        post:
          type: integer
      required:
      - created_at
      - id
      - post
      - user
    LikeDetail:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Author'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - user
    List:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        public:
          type: boolean
        user:
          type: integer
      required:
      - id
      - name
      - public
      - user
    ListDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        posts:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkItem'
          readOnly: true
        name:
          type: string
          maxLength: 150
        public:
          type: boolean
        user:
          type: integer
      required:
      - id
      - name
      - posts
      - public
      - user
    PaginatedCommentListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CommentList'
    PaginatedFollowerListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FollowerList'
    PaginatedFollowingListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FollowingList'
    PaginatedLikeDetailList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LikeDetail'
    PaginatedListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/List'
    PaginatedPostDetailList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostDetail'
    PatchedCommentList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          maxLength: 5000
        author:
          type: integer
        post:
          type: integer
        parent_comment:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sub_comments:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveComment'
          readOnly: true
    PatchedList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        public:
          type: boolean
        user:
          type: integer
    PatchedPostCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 250
        body:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
        tag:
          type: array
          items:
            type: integer
        likes:
          type: array
          items:
            type: integer
          readOnly: true
    PostCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 250
        body:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
        tag:
          type: array
          items:
            type: integer
        likes:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - likes
      - tag
      - title
      - updated_at
    PostDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          $ref: '#/components/schemas/Author'
        tag:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        like_details:
          type: string
          readOnly: true
        comment_details:
          type: string
          readOnly: true
        bookmark_details:
          type: string
          readOnly: true
        title:
          type: string
          maxLength: 250
        body:
          type: string
          maxLength: 5000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - body
      - bookmark_details
      - comment_details
      - created_at
      - id
      - like_details
      - tag
      - title
      - updated_at
    RecursiveComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
          maxLength: 5000
        author:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        sub_comments:
          type: string
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - sub_comments
      - updated_at
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
      required:
      - id
      - title
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - id
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
